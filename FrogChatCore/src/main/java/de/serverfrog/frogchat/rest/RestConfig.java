package de.serverfrog.frogchat.rest;

import java.util.Set;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

import org.slf4j.LoggerFactory;
/**
 *
 * @author m-p-h_000
 */
@ApplicationPath("/rest") 
public class RestConfig extends Application {
    @Override 
    public Set<Class<?>> getClasses() { 
        
        Set<Class<?>> resources = new java.util.HashSet<>(); 
        // following code can be used to customize Jersey 2.0 JSON provider: 
        try { 
            Class jsonProvider = Class.forName("org.glassfish.jersey.jackson.JacksonFeature"); 
            // Class jsonProvider = Class.forName("org.glassfish.jersey.moxy.json.MoxyJsonFeature"); 
            // Class jsonProvider = Class.forName("org.glassfish.jersey.jettison.JettisonFeature"); 
            resources.add(jsonProvider); 
            LoggerFactory.getLogger(RestConfig.class).error("JSON Provider installed"); 
        } catch (ClassNotFoundException ex) { 
            LoggerFactory.getLogger(RestConfig.class).error("No JSON Provider found"); 
        } 
        addRestResourceClasses(resources); 
        return resources; 
    } 
 
    /** 
     * Do not modify addRestResourceClasses() method. 
     * It is automatically re-generated by NetBeans REST support to populate 
     * given list with all resources defined in the project. 
     */ 
    private void addRestResourceClasses(Set<Class<?>> resources) { 
        resources.add(de.serverfrog.frogchat.rest.ChatRest.class); 
        resources.add(de.serverfrog.frogchat.rest.DebugRest.class); 
        resources.add(de.serverfrog.frogchat.rest.UserRest.class); 
    } 
}
