package de.serverfrog.frogchatgui;

import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.ws.Response;

//import org.apache.commons.lang3.StringUtils;
//import org.apache.cxf.jaxrs.client.WebClient;
//import org.apache.geronimo.mail.util.Base64;

import org.apache.commons.lang3.StringUtils;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPSecretKeyRing;
import org.bouncycastle.util.encoders.Base64;

import de.serverfrog.frogchat.encryption.PGPFrogUtil;
import de.serverfrog.frogchat.entities.User;

/**
 *
 * @author m-p-h_000
 */
public class LoginCask extends javax.swing.JDialog {

    private User user;

    private String server;

    private String password;

    private PGPSecretKeyRing keyRing;

    private PGPPublicKey serverPublicKey;

    private File privateKey;

    /**
     * Creates new form LoginCask
     * <p>
     * @param parent
     * @param modal
     */
    public LoginCask(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e); //To change body of generated methods, choose Tools | Templates.
                Runtime.getRuntime().exit(0);
            }

        });
    }

    public String getServer() {
        return server;
    }

    public User getUser() {
        return user;
    }

    public PGPSecretKeyRing getKeyRing() {
        return keyRing;
    }

    public PGPPublicKey getServerPublicKey() {
        return serverPublicKey;
    }

    public String getPassword() {
        return password;
    }

    public File getPrivatKey() {
        return privateKey;
    }

    /**
     * This method is called from within the constructor to initialize the form
     * . WARNING : Do NOT modify this code.The content of this method is always
     * regenerated by the Form Editor.
     *
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        userfield = new javax.swing.JTextField();
        serverfield = new javax.swing.JTextField();
        connectBot = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jProgressBar1 = new javax.swing.JProgressBar();
        statusLable = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Login");
        setAlwaysOnTop(true);
        setMaximumSize(new java.awt.Dimension(475, 200));
        setMinimumSize(new java.awt.Dimension(475, 200));
        setPreferredSize(new java.awt.Dimension(475, 200));

        jLabel1.setText("Username");

        jLabel2.setText("Server");

        serverfield.setText("serverfrog.de");

        connectBot.setText("Ok");
        connectBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBotActionPerformed(evt);
            }
        });

        jLabel3.setText("Password");

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        jLabel4.setText("Port");

        portField.setText("9090");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusLable, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectBot))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userfield)
                            .addComponent(passwordField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serverfield, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portField)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(serverfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectBot, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectBotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBotActionPerformed
        if ( StringUtils.isBlank(serverfield.getText())
                || StringUtils.isBlank(userfield.getText())
                || StringUtils.isBlank(new String(passwordField.getPassword())) ) {
            return;
        }
        connectBot.setEnabled(false);
        new Thread(new Runnable() {

            @Override
            public void run() {
                String userAddress = userfield.getText() + '@' + serverfield.getText();
                File userPath = new File(PGPFrogUtil.HOME_KEY_FOLDER.getAbsolutePath() + File.separatorChar + userAddress);
                if ( !userPath.exists() ) userPath.mkdirs();
                if ( !userPath.canRead() || !userPath.canWrite() ) {
                    statusLable.setText("Can't read or write in key Folder");
                    connectBot.setEnabled(true);
                    return;
                }
                File secKey = new File(userPath.getAbsolutePath() + PGPFrogUtil.SECURE_KEY_PATH_SUFFIX);
                if ( !secKey.exists() ) {
                    statusLable.setText("Keys does not exist. Generating");
                    jProgressBar1.setIndeterminate(true);
                    PGPSecretKeyRing generateKeys = PGPFrogUtil.generateKeys(userAddress, new String(passwordField.getPassword()));
                    PGPFrogUtil.writeKeysInto(generateKeys, userPath);
                    jProgressBar1.setIndeterminate(false);
                }

                statusLable.setText("Test Password and Key combination.");
                jProgressBar1.setIndeterminate(true);
                PGPSecretKeyRing readKeysFrom = PGPFrogUtil.readKeysFrom(userPath);
                UUID randomUUID = UUID.randomUUID();
                statusLable.setText("Encrypt");
                String encryptedBase64 = PGPFrogUtil.getEncryptedBase64(randomUUID.toString(), readKeysFrom.getPublicKey());
                statusLable.setText("Decrypt");
                String decryptedBase64;
                try {
                    decryptedBase64 = PGPFrogUtil.getDecryptedBase64(encryptedBase64, secKey, new String(passwordField.getPassword()));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(LoginCask.this, "Password Wrong");
                    jProgressBar1.setIndeterminate(false);
                    connectBot.setEnabled(true);
                    return;
                }
                if ( !decryptedBase64.equals(randomUUID.toString()) ) {
                    JOptionPane.showMessageDialog(LoginCask.this, "Password Wrong");
                    jProgressBar1.setIndeterminate(false);
                    connectBot.setEnabled(true);
                    return;
                }
                keyRing = readKeysFrom;
                jProgressBar1.setIndeterminate(true);
                statusLable.setText("Try to Login...");
                try {
                    String serverUrl = serverfield.getText();
                    if ( !serverUrl.startsWith("http") )
                        serverUrl = "http://" + serverUrl;
                    if ( portField.getText().isEmpty() )
                        serverUrl += ":8080";
                    else serverUrl += ":" + portField.getText();
//                    WebClient webclient = WebClient.create(serverUrl + "/FrogChatWeb/rest/");
                    statusLable.setText("Connect to server.");
                    Response get;
                    try {
//                        get = webclient.path("chat").get();
                    } catch (Exception e) {
                        statusLable.setText("Couldn't connect to server.");
                        connectBot.setEnabled(true);
                        jProgressBar1.setIndeterminate(false);
                        return;
                    }

//                    if ( get.getStatus() != Status.OK.getStatusCode() ) {
//                        connectBot.setEnabled(true);
//                        statusLable.setText("Connection to Server Failed: " + get.getStatusInfo());
//                        jProgressBar1.setIndeterminate(false);
//                        connectBot.setEnabled(true);
//                        return;
//                    }
//                    webclient.back(true);

                    User u = new User();
                    u.setUsername(userfield.getText());
                    u.setPublicKey(new String(Base64.encode(keyRing.getPublicKey().getEncoded())));
                    statusLable.setText("Log in");
//                    WebClient accept = webclient.path("user").path("login").type(MediaType.APPLICATION_XML);
//                    String publicKey = accept.post(u, String.class);
//                    InputStream decoderStream = PGPUtil.getDecoderStream(new ByteArrayInputStream(publicKey.getBytes()));
//                    PGPObjectFactory pgpObjectFactory = new PGPObjectFactory(decoderStream);
//                    Object nextObject = pgpObjectFactory.nextObject();
//                    if ( !(nextObject instanceof PGPPublicKeyRing) ) {
//                        connectBot.setEnabled(true);
//                        statusLable.setText("Returned Vales was not a PGP Public KeyRing");
//                        jProgressBar1.setIndeterminate(false);
//                        connectBot.setEnabled(true);
//                        return;
//                    }
//                    serverPublicKey = ((PGPPublicKeyRing)nextObject).getPublicKey();
                    boolean isOwner = false;
                    List<String> serverIds = new ArrayList<>();
                    for (Iterator it = serverPublicKey.getUserIDs(); it.hasNext();) {
                        Object next = it.next();
                        if ( next instanceof String ) {
                            String id = (String)next;
                            serverIds.add(id);
                            if ( id.equals("server@" + serverfield.getText()) ) {
                                isOwner = true;
                            }
                        }
                    }
                    if ( !isOwner ) {
                        if ( JOptionPane.showConfirmDialog(LoginCask.this, "The Connected Server is not in the ID List of the key.\n"
                                + "Connected to: server@" + serverfield.getText()
                                + "\nAvaibleIds: " + serverIds + " |",
                                "Servers are not the Same", JOptionPane.OK_CANCEL_OPTION) != JOptionPane.OK_OPTION ) {
                            connectBot.setEnabled(true);
                            statusLable.setText("");
                            jProgressBar1.setIndeterminate(false);
                            connectBot.setEnabled(true);
                            return;
                        }
                    }
                    try {
                        JAXBContext jc;
                        jc = JAXBContext.newInstance(User.class);
                        Marshaller createMarshaller = jc.createMarshaller();
                        StringWriter stringWriter = new StringWriter();
                        createMarshaller.marshal(u, stringWriter);
                        System.out.println();
                        System.out.println("asd");
                        System.out.println("stringWriter");
                        System.out.println(stringWriter.toString());
                    } catch (JAXBException ex) {
                        Logger.getLogger(LoginCask.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    user = u;
                    server = serverUrl;
                    password = new String(passwordField.getPassword());
                    System.out.println("finished Logging in.");
                    System.out.println("User=" + user);
                    System.out.println("Server=" + server);
                    LoginCask.this.setVisible(false);
                } catch (IOException e) {
                    statusLable.setText(e.getLocalizedMessage());
                } finally {
                    connectBot.setEnabled(true);
                    jProgressBar1.setIndeterminate(false);
                }
            }
        }).start();
    }//GEN-LAST:event_connectBotActionPerformed

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        if ( evt.getKeyCode() == KeyEvent.VK_ENTER ) connectBotActionPerformed(null);
    }//GEN-LAST:event_passwordFieldKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectBot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField portField;
    private javax.swing.JTextField serverfield;
    private javax.swing.JLabel statusLable;
    private javax.swing.JTextField userfield;
    // End of variables declaration//GEN-END:variables

}
